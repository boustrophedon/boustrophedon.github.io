<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>recycled math</title><link href="https://harrystern.net/" rel="alternate"></link><link href="https://harrystern.net/feeds/all.atom.xml" rel="self"></link><id>https://harrystern.net/</id><updated>2021-07-26T00:00:00-04:00</updated><entry><title>How to pair program like it's the 1980s (with GNU Screen)</title><link href="https://harrystern.net/pair-programming-with-screen.html" rel="alternate"></link><published>2021-07-26T00:00:00-04:00</published><updated>2021-07-26T00:00:00-04:00</updated><author><name>Harry Stern</name></author><id>tag:harrystern.net,2021-07-26:/pair-programming-with-screen.html</id><summary type="html">&lt;p&gt;How to use GNU Screen to pair program remotely.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What we're doing&lt;/h2&gt;
&lt;p&gt;Suppose you want to pair program with someone remotely. You could use one of several online in-browser services or IDE plugins, but if your environment is special or you need access to some resources behind a VPN, these solutions may not work for you.&lt;/p&gt;
&lt;p&gt;Screen is a tool that allows you to run multiple terminals in one session. It's particularly useful on servers, where you can leave your session running after disconnecting in the same way that when you put your laptop to sleep, all your windows are still there when you open it back up. Tmux is a similar (but released 20 years later and so makes a less interesting title) program that's probably more popular, and also supports multiuser access but with less sophisticated access controls.&lt;/p&gt;
&lt;p&gt;We're going to use screen's multiuser feature to share the same screen session across two ssh sessions, letting two people interact remotely with the same shell at the same time. You could pair program by having each person type alternating letters if you really wanted.&lt;/p&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;Why not? Maybe you don't like screensharing because your Spotify playlist is full of Taylor Swift, or your OnlyFans notifications will give away your secret NASCAR hobby. Maybe you're actually swapping who's typing frequently. Maybe you can't program without your One True Vim Configuration.&lt;/p&gt;
&lt;h2&gt;Prerequisites setup&lt;/h2&gt;
&lt;p&gt;To make this work you need to have access to a shared computer that you can ssh into. You can set this up with a single user (requires less configuration but not always ideal or possible, especially in corporate environments), two existing users if you're on a corporate or educational network and you already have shared access to several machines, or you can make an extra "guest" user and generate ssh keys per-guest, giving you the ability to revoke access easily.&lt;/p&gt;
&lt;p&gt;In the first case (one user), you need your friend to generate a new ssh key via something like &lt;code&gt;ssh-keygen -t ecdsa -C "pair programming key $(date +%F)"&lt;/code&gt;, have them send you the public key, and then add it to your &lt;code&gt;authorized_keys&lt;/code&gt; file. Then all they need to do is ssh to your machine (on the same user as you) and use &lt;code&gt;screen -x&lt;/code&gt; to attach to your screen session, without doing the extra setup for multiuser below.&lt;/p&gt;
&lt;p&gt;With a second guest user, you need to set up that user on your machine, have your friend generate the ssh key as above, and then add the key to the guest user's &lt;code&gt;authorized_keys&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Additionally, there is information on the internet about SELinux needing to be enabled but that doesn't seem to be the case on my desktop or server that I tested on. The screen binary also must be suid root but that was already the case on my server and desktop as well. I did encounter a non-suid-root screen binary on a work computer, but all you need to do to resolve that is &lt;code&gt;sudo chmod u+s `which screen` &amp;amp;&amp;amp; sudo chmod 755 /var/run/screen&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Screen basics&lt;/h2&gt;
&lt;p&gt;The most basic usage of screen is just to type &lt;code&gt;screen&lt;/code&gt;, which creates a new session. You can then use &lt;code&gt;C-a c&lt;/code&gt; to create a new  terminal, and &lt;code&gt;C-a a&lt;/code&gt; to switch back to the previous one. You can use &lt;code&gt;C-a n&lt;/code&gt; to go to the next in order and &lt;code&gt;C-a p&lt;/code&gt; to go to the previous.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C-a d&lt;/code&gt; &lt;em&gt;detaches&lt;/em&gt; the current screen, leaving all your terminals running and ready to be re-opened later. Note that if you put your laptop to sleep or shut your computer down, they will of course also pause or be terminated - it's not magic.&lt;/p&gt;
&lt;p&gt;To resume a session, from a terminal we can run &lt;code&gt;screen -r&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I typically run &lt;code&gt;screen -Udr&lt;/code&gt; to resume a session, where the &lt;code&gt;-U&lt;/code&gt; enables Unicode, and using &lt;code&gt;-dr&lt;/code&gt; instead of just &lt;code&gt;-r&lt;/code&gt; will detach other currently attached terminals. This is useful if you were attached via a laptop and want to attach from a different computer, or simply if you're lazy and don't want to find whatever other terminal is attached.&lt;/p&gt;
&lt;h2&gt;Execution&lt;/h2&gt;
&lt;p&gt;There are a few parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We need to give our screen session a name so it's easy to join&lt;/li&gt;
&lt;li&gt;We need to enable multiuser mode so other users can join&lt;/li&gt;
&lt;li&gt;We need to give the specific user we want access to the session&lt;/li&gt;
&lt;li&gt;The other user needs to attach to the shared session&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Incidentally, the third point is why it may be easier to make a guest account for pair programming on your machine, because then you can give that guest account access permanently as we'll see later.&lt;/p&gt;
&lt;h3&gt;1. Naming a session&lt;/h3&gt;
&lt;p&gt;When starting a screen session, we can name it with the &lt;code&gt;-S &amp;lt;sessionname&amp;gt;&lt;/code&gt; argument. Combined with the unicode flag above, it would look like &lt;code&gt;screen -US shared&lt;/code&gt;, for example.&lt;/p&gt;
&lt;h3&gt;2. Enable multiuser mode&lt;/h3&gt;
&lt;p&gt;To enable multiuser mode, type &lt;code&gt;C-a :multiuser on&lt;/code&gt;. Once you hit &lt;code&gt;:&lt;/code&gt; after &lt;code&gt;C-a&lt;/code&gt;, it will appear in the bottom left where the status messages appear, and as you type the rest it will show up there.&lt;/p&gt;
&lt;h3&gt;3. Give the other user access to the session&lt;/h3&gt;
&lt;p&gt;To give the other user access to our session, type &lt;code&gt;C-a :acladd &amp;lt;username&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; is the name of the user's login on the machine, e.g. &lt;code&gt;guest&lt;/code&gt; or &lt;code&gt;harrystern&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;4. Attaching to the shared session&lt;/h3&gt;
&lt;p&gt;Once your friend has sshed to your server, all they need to do to join your session is use the &lt;code&gt;-x &amp;lt;user&amp;gt;/&amp;lt;sessionname&amp;gt;&lt;/code&gt; flag instead of &lt;code&gt;-r&lt;/code&gt;. So as before with the &lt;code&gt;-U&lt;/code&gt; flag, the full command would look something like &lt;code&gt;screen -Ux harrystern/shared&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;They should now see whatever you see on your terminal, and vice-versa. Anything you or they type &lt;em&gt;in the same terminal&lt;/em&gt; will be shared, but you can open separate terminals with &lt;code&gt;C-a c&lt;/code&gt; and view and use them separately. That is, the terminals themselves are shared but displaying them are not - you can view and type in one while your friend works in another, and switch between them freely. You just need to be careful about not accidentally typing when you're in the same terminal as someone else when they're working.&lt;/p&gt;
&lt;h2&gt;Using &lt;code&gt;.screenrc&lt;/code&gt; for streamlined shared access&lt;/h2&gt;
&lt;p&gt;In order to make this process easier, you can put some commands in a &lt;code&gt;.screenrc&lt;/code&gt; file so that you don't have to do the permissions setup each time. Depending on your security requirements and level of trust, this may or may not be viable in your personal situation. e.g. I would not necessarily do it on a shared university machine, but I don't see an issue doing it on a secure corporate cloud machine where only other developers &lt;em&gt;may&lt;/em&gt; have ssh access.&lt;/p&gt;
&lt;p&gt;You can just open &lt;code&gt;~/.screenrc&lt;/code&gt; with your favorite text editor and add the lines &lt;code&gt;multiuser on&lt;/code&gt; and &lt;code&gt;acladd &amp;lt;username&amp;gt;&lt;/code&gt; as we did in steps 2 and 3 above. Then all your screen sessions will be multiuser-enabled and available to join by anyone whom you've given access to via &lt;code&gt;acladd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;.screenrc&lt;/code&gt; to manage access also makes it easier to use screen's advanced multiuser acl features, like enabling read-only access by using the &lt;code&gt;-w&lt;/code&gt; flag on the &lt;code&gt;acladd&lt;/code&gt; command. See the man page for more information.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Set up ssh access for your friend, and then you run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;screen -US example_name
C-a :multiuser on
C-a :acladd friends_username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then your friend sshs in and runs&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;screen -Ux your_username/example_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;I used &lt;a href="https://wiki.networksecuritytoolkit.org/index.php/HowTo_Share_A_Terminal_Session_Using_Screen"&gt;this page&lt;/a&gt; to remind myself how to do this, and really the reason I wrote this post is so that I don't have to find that page in the future when I forget.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>How to format your entire codebase without introducing backdoors</title><link href="https://harrystern.net/how-to-format-your-entire-codebase-without-introducing-backdoors.html" rel="alternate"></link><published>2021-05-14T00:00:00-04:00</published><updated>2021-05-14T00:00:00-04:00</updated><author><name>Harry Stern</name></author><id>tag:harrystern.net,2021-05-14:/how-to-format-your-entire-codebase-without-introducing-backdoors.html</id><summary type="html">&lt;p&gt;When working on legacy code with many developers, it's pretty common for someone to suggest running a code formatter on the whole codebase. Even small code formatting changes often get called out in code review for making the code harder to review. Why don't we automatically format our code?&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When working on legacy code with many developers, it's pretty common for someone to suggest running a code formatter on the whole codebase. Even small code formatting changes often get called out in code review for making the code harder to review. Why don't we automatically format our code?&lt;/p&gt;
&lt;p&gt;The fundamental problem is that it's virtually impossible to review the changes since they're likely to hit every file in your codebase. It would be very easy to introduce, for example, a hidden backdoor, and you also can't verify if, due to configuration differences, the formatting simply isn't as agreed upon without further systems in place.&lt;/p&gt;
&lt;p&gt;So how do we take a codebase without consistent style and make it pretty?&lt;/p&gt;
&lt;h2&gt;Step 0: Make a decision as a team to format the code&lt;/h2&gt;
&lt;p&gt;If you're working as a team (if you're the sole owner of your code presumably you can trust yourself to not introduce backdoors) you need to agree on what code style and formatter you're going to use. Try not to bikeshed too much and use the defaults your particular tool has.&lt;/p&gt;
&lt;h2&gt;Step 1: Make sure that code formatting is required on all future commits.&lt;/h2&gt;
&lt;p&gt;You must have an automated step in your review process or build pipeline to check that the code is formatted properly. If you don't do this, you'll eventually end up where you started: inconsistent formatting, unreadable test names, and needless clashes over style in code review.&lt;/p&gt;
&lt;p&gt;You may be able to enable this prior to actually formatting the rest of the codebase if your tool is able to process only diffs, but if not you will need to enable it immediately after committing the formatted code.&lt;/p&gt;
&lt;p&gt;In fact, &lt;strong&gt;you may be able to stop here!&lt;/strong&gt; If you trust your CI system, it may be sufficient to post the code review and have your reviewers note that it passed the formatting check in your pipeline. If it isn't possible to do this or you would like to have more confidence, keep reading.&lt;/p&gt;
&lt;h2&gt;Step 2: Document the steps you will take to format the code&lt;/h2&gt;
&lt;p&gt;We want to write this document for two reasons: One, so that when new developers join your team they can set up their environment to use the same formatting, and two, so that the actions performed during step 3 below are clear to everyone.&lt;/p&gt;
&lt;p&gt;This may be as simple as writing "run command X in the root of the repository" in your project's README or adding a script to your existing build process. Be sure to include any configuration files required for the formatter! Common IDE configurations are also nice. This step should be pretty easy, because it should be the same as your automated system's setup.&lt;/p&gt;
&lt;h2&gt;Step 3: The Formatting Ceremony&lt;/h2&gt;
&lt;p&gt;This is the interesting part.&lt;/p&gt;
&lt;p&gt;Similar to a &lt;a href="https://en.wikipedia.org/wiki/Key_signing_party"&gt;key-signing party&lt;/a&gt; or the &lt;a href="https://www.cloudflare.com/dns/dnssec/root-signing-ceremony/"&gt;Root DNS key signing ceremony&lt;/a&gt;, decide as a team who you trust to make the changes, have them gather in a room (or use pre-shared gpg keys to sign the commits if you are fully remote), and have them all run the same steps to format the code.&lt;/p&gt;
&lt;p&gt;Then, by sharing the code (pushing separate branches to a shared repository, transferring via USB drive, or carrier pigeon), have each member diff their formatted code against the others' and check that there are no deviations. If you're remote, make sure to check the signatures on each commit with &lt;code&gt;git log --show-signature&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If everything checks out, pick someone at random to send out the pull request and have the other ceremony participants sign off after checking the commit id (and signature) matches the ones checked locally, hopefully in addition to the newly-added automated formatting check.&lt;/p&gt;
&lt;h2&gt;Remaining issues and alternative solutions&lt;/h2&gt;
&lt;p&gt;The biggest issue with a large formatting commit is that the output of &lt;code&gt;git blame&lt;/code&gt; and to a lesser extent &lt;code&gt;git log&lt;/code&gt; are obscured. Because your formatter will very likely touch a large percentage of the lines in your codebase, running &lt;code&gt;git blame&lt;/code&gt; will show you the formatting commit as the most recent commit, instead of actual code changes, on most lines.&lt;/p&gt;
&lt;p&gt;There's a &lt;a href="https://www.moxio.com/blog/43/ignoring-bulk-change-commits-with-git-blame"&gt;good article&lt;/a&gt; describing a relatively recent feature of git which lets you configure a file (or command line parameter) listing commits that git blame should ignore. As noted in the article, most tools, like GitHub and GitLab, do not support this feature yet.&lt;/p&gt;
&lt;p&gt;Also, there may be a way to streamline the verification process if you're meeting physically in the same place, by doing some kind of variant of the &lt;a href="https://en.wikipedia.org/wiki/Zimmermann%E2%80%93Sassaman_key-signing_protocol"&gt;Zimmermann-Sassaman key-signing protocol&lt;/a&gt; used at key-signing parties.&lt;/p&gt;
&lt;h3&gt;An alternative and gradual but more annoying solution&lt;/h3&gt;
&lt;p&gt;There is an alternate, but more annoying way to make these changes without a single big commit, and without obscuring the git blame.&lt;/p&gt;
&lt;p&gt;You can run the code formatter per-diff, only on the code that has been changed. As your codebase is worked on, it will gradually be formatted. This can work if it's constantly under change, you have a lot of large commits and rewrites, or your codebase is mostly pretty clean and you just want to enforce the standard for new code only. There are cases where this will not work, if for example you want to change indentation style in Python or if your formatting style requires a specific method/class/variable naming convention and your commits do not touch all uses of the name.&lt;/p&gt;
&lt;p&gt;The main downside of this method is that your codebase becomes partially-formatted, which may make it more unreadable than it was before.&lt;/p&gt;
&lt;p&gt;The other downside of doing the formatting partially is that if you want to make this process automated, your formatter has to be able to work on diffs, which is not a particularly common feature. You may have to format the entire file and then use features of &lt;code&gt;git add&lt;/code&gt; to only add the specific lines you want, which is annoying.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Agree to require code formatting on all commits&lt;/li&gt;
&lt;li&gt;Make it automated&lt;/li&gt;
&lt;li&gt;Gather trusted people in a room, or have them exchange gpg keys over a trusted channel if remote&lt;/li&gt;
&lt;li&gt;Everyone runs the same steps to format the code, exchanges the resulting commits, and verifies that&lt;/li&gt;
&lt;li&gt;The commits are all the same&lt;/li&gt;
&lt;li&gt;The signatures match (if working remotely)&lt;/li&gt;
&lt;li&gt;Randomly choose someone to push the code for review&lt;/li&gt;
&lt;li&gt;Everyone again verifies the code in the review matches their own diff, and approves the code&lt;/li&gt;
&lt;li&gt;Enable a formatting check in your CI pipeline / code review tool&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git config blame.ignoreRevsFile&lt;/code&gt; with a file that contains the formatting commit id to ignore it in &lt;code&gt;git blame&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I honestly don't know how many projects this is actually useful for: it's mostly written to try to convince my coworkers to do it for our codebase. I think there would be objections to doing this on an even mildly popular open source project.&lt;/p&gt;
&lt;p&gt;I'd love to hear about alternate methods to do this, or if you've successfully done something similar in your own codebase as a datapoint for implementing it at work. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thank you Victor, Stan, and Pasha for reviewing drafts of this article.&lt;/em&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="trusting trust"></category><category term="programming"></category><category term="git"></category></entry><entry><title>How I'm deploying Dart server code on DigitalOcean</title><link href="https://harrystern.net/how-im-deploying-dart-server-code-on-digitalocean.html" rel="alternate"></link><published>2015-03-04T00:00:00-05:00</published><updated>2015-03-04T00:00:00-05:00</updated><author><name>Harry Stern</name></author><id>tag:harrystern.net,2015-03-04:/how-im-deploying-dart-server-code-on-digitalocean.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;NOTE: this post was written in 2015 and much of the dart-specific stuff does not necessarily apply anymore&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So I finally started to work on my multiplayer breakout clone in dart that I've been meaning to do forever. It's moderately functional now. This post is how I am deploying the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;NOTE: this post was written in 2015 and much of the dart-specific stuff does not necessarily apply anymore&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So I finally started to work on my multiplayer breakout clone in dart that I've been meaning to do forever. It's moderately functional now. This post is how I am deploying the server code on digitalocean. It's written mostly for someone who has maybe used a desktop linux environment and isn't completely lost on the command line, but who maybe hasn't set up a server before. Here is the short version:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a new fedora droplet&lt;ul&gt;
&lt;li&gt;ssh keys&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;yum update (optional)&lt;/li&gt;
&lt;li&gt;create new user&lt;/li&gt;
&lt;li&gt;copy ssh keys to new user's directory&lt;ul&gt;
&lt;li&gt;make sure permissions are correct&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;add user to wheel&lt;/li&gt;
&lt;li&gt;remove root login from sshd_config&lt;/li&gt;
&lt;li&gt;add dartapps user&lt;ul&gt;
&lt;li&gt;useradd -r -s /sbin/nologin dartapps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;download and unzip dart-sdk to /opt/&lt;/li&gt;
&lt;li&gt;symlink /opt/dart-sdk/bin/{dart,dart2js,pub} to /usr/bin/{dart,dart2js,pub}&lt;/li&gt;
&lt;li&gt;cd to /usr/local/bin and git clone the repo&lt;/li&gt;
&lt;li&gt;This is what I did originally to get deps working:&lt;ul&gt;
&lt;li&gt;if not running as root, switch to root&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;PUB_CACHE=/usr/local/bin/dart-breakout/pub-cache pub get&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can also choose to do the previous step and the following on the server, or locally and scp the file:&lt;ul&gt;
&lt;li&gt;after getting the dependencies with pub get, create a build/ directory and run:
    &lt;code&gt;dart2js --categories=Server --output-type=dart bin/server.dart -o build/server.dart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;create systemd unit file&lt;ul&gt;
&lt;li&gt;if building with dart2js, set the exec file accordingly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;enable unit file&lt;/li&gt;
&lt;li&gt;start unit file&lt;/li&gt;
&lt;li&gt;yay&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, create a digitalocean droplet running Fedora (21 is the latest they have as of 3/15). You should probably choose to have your ssh key included.&lt;/p&gt;
&lt;p&gt;The next step is optional: Do a &lt;code&gt;yum update&lt;/code&gt;. This, of course, updates all of your packages and may take a little while. It will also most likely give you some security fixes that you probably want.&lt;/p&gt;
&lt;p&gt;Next we're going to create a new user so that you're not running as root all the time, because that is a bad idea. run &lt;code&gt;useradd NEWUSERNAME&lt;/code&gt; with whatever you want, and follow the directions. Add this user to wheel with &lt;code&gt;usermod -a -G wheel NEWUSERNAME&lt;/code&gt;, which will give it access to sudo. You can modify your /etc/sudoers (with &lt;code&gt;visudo&lt;/code&gt; !) so that you don't have to type your password for sudo, or not, depending on your preference. Finally, if you added ssh keys on droplet creation, copy them from .ssh/authorized_keys to /home/NEWUSERNAME/.ssh/authorized_keys and make sure to chown and chgrp your new /home/NEWUSERNAME/.ssh/ directory so it's owned by your new user.&lt;/p&gt;
&lt;p&gt;Since digitalocean provides console access via its web dashboard, there's really no reason to allow root logins from ssh, so now that we have a new user that we can log in to (check to make sure you can log in first; you may have to reboot the server) let's fix that. Edit /etc/ssh/sshd_config as root and uncomment the line &lt;code&gt;PermitRootLogin yes&lt;/code&gt;, and change yes to no. Try sshing to the droplet as root. If it still works, you need to restart the ssh server or at least reload the configs.&lt;/p&gt;
&lt;p&gt;Now we're going to create a user to run our dart server. We want it to have very few privileges on the system in case someone takes advantage of a vulnerability in the server and is able to execute arbitrary code, and it is also convenient for other purposes, like bandwidth-limiting, disk space quotas, other monitoring stuff that I'm not going to cover. I'm going to call this user 'dartapps' but you can call it whatever. To create it, run &lt;code&gt;useradd -r -s /sbin/nologin dartapps&lt;/code&gt;. The -r option makes the user a system user, without a home directory, and -s /sbin/nologin means that it doesn't have a login shell; you cannot login as this user even if you gave it a password.&lt;/p&gt;
&lt;p&gt;It is now time to install the dart sdk. Open https://www.dartlang.org/tools/download.html#other and copy the 64-bit linux download url. Download it into /opt and unzip it (you will probably need to &lt;code&gt;yum install unzip&lt;/code&gt;). In order to make things convenient, you can symlink any or all of the files in /opt/dart-sdk/bin/ to /usr/bin/ by doing &lt;code&gt;ln -s /opt/dart-sdk/bin/dart /usr/bin/dart&lt;/code&gt;, and similarly for the others. At the very least you will want to do this for the dart and pub commands. You may also need to &lt;code&gt;chmod o+rx /opt/dart-sdk/bin/dart&lt;/code&gt; if you cannot run e.g. &lt;code&gt;dart --help&lt;/code&gt; from your NEWUSERNAME user.&lt;/p&gt;
&lt;p&gt;At this point we finally get to download our own code. Either scp your server code, git clone it, or whatever, into some directory. I chose /usr/local/bin/dart-breakout/ for my breakout code, but it could just have easily gone into /srv/ or something. /srv may in fact be a better choice.&lt;/p&gt;
&lt;p&gt;There is an optional, somewhat unsupported step here: Instead of copying all your code over, you may, on your local development machine, create a build/bin directory in your pub package file structure. Then, run the following command, assuming your server dart code is in bin/server.dart: &lt;code&gt;dart2js --categories=Server --output-type=dart bin/server.dart -o build/bin/server.dart&lt;/code&gt;. This runs "dart2dart" on your code and puts it all in a single file, but instead of outputting js it outputs dart code. You may also do this on the server after getting the dependencies as explained in the next paragraph.&lt;/p&gt;
&lt;p&gt;If you did not follow the above optional step, this is what I originally did: Normally, pub downloads your packages into ~/.pub-cache. However, our dartapps user does not have a home directory. If we try to run &lt;code&gt;pub get&lt;/code&gt; as root, pub will install our dependencies into /root/.pub-cache, which is of course unreadable by the dartapps user. We can fix this by either creating a global pub-cache inside, say, /usr/local/include/ or /usr/local/lib/, but I chose the option of creating it inside my server's code directory, so /usr/local/bin/dart-breakout/pub-cache. This is already a bit messy and a mild abuse of /usr/local/bin, and the better option is to compile all your dart code to a single file as in the above step.&lt;/p&gt;
&lt;p&gt;In order to create this extra pub cache directory, we need to (as root), run &lt;code&gt;PUB_CACHE=/usr/local/bin/dart-breakout/pub-cache pub get&lt;/code&gt;. Setting the PUB_CACHE variable tells pub where to put the cache, and sets up the symlinks to point at that local cache for our application. Of course, be sure to substitute dart-breakout for your own name. You should test that the dependencies are installed and permissions are correct by running the server as a non-root user.&lt;/p&gt;
&lt;p&gt;Lastly, we get monitoring, logging, and restart-on-crash for free by creating a simple systemd unit file that runs our server as the dartapps user. Drop this file into /etc/systemd/system/dart-breakout.service, replacing dart-breakout in both the filename and inside the file as needed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/dart /usr/local/bin/dart-breakout/bin/server.dart&lt;/span&gt;
&lt;span class="na"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;always&lt;/span&gt;
&lt;span class="na"&gt;StandardOutput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;syslog&lt;/span&gt;
&lt;span class="na"&gt;StandardError&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;syslog&lt;/span&gt;
&lt;span class="na"&gt;SyslogIdentifier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;dart-breakout&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;dartapps&lt;/span&gt;
&lt;span class="na"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;dartapps&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you followed the optional "dart2dart" step, replace the project/bin/server.dart file with the compiled file, which you would probably install to /usr/local/bin/ directly.&lt;/p&gt;
&lt;p&gt;And now we're done! Run (as root) &lt;code&gt;systemctl enable dart-breakout&lt;/code&gt; to enable the service to run on startup, and &lt;code&gt;systemctl start dart-breakout&lt;/code&gt; to start the server now. You can use &lt;code&gt;journalctl -u dart-breakout&lt;/code&gt; to view the output of your program.&lt;/p&gt;</content><category term="System Administration"></category><category term="dart"></category><category term="deployment"></category><category term="systemd"></category><category term="fedora"></category><category term="websockets"></category></entry><entry><title>How to make daily backups with rdiff-backup and systemd</title><link href="https://harrystern.net/how-to-make-daily-backups-with-rdiff-backup-and-systemd.html" rel="alternate"></link><published>2014-09-12T00:00:00-04:00</published><updated>2014-09-12T00:00:00-04:00</updated><author><name>Harry Stern</name></author><id>tag:harrystern.net,2014-09-12:/how-to-make-daily-backups-with-rdiff-backup-and-systemd.html</id><summary type="html">&lt;p&gt;The other day I was talking to one of my friends and he mentioned how he lost a hard drive recently and consequently all of his stuff. I realized that, although I had bought a backup hard drive a little while ago, I hadn't done more than a couple backups …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The other day I was talking to one of my friends and he mentioned how he lost a hard drive recently and consequently all of his stuff. I realized that, although I had bought a backup hard drive a little while ago, I hadn't done more than a couple backups with it when I felt like it. So I decided that I would finally set up regular backups of my home directory.&lt;/p&gt;
&lt;p&gt;I'd looked briefly at backup solutions before and thought that &lt;a href="http://savannah.nongnu.org/projects/rdiff-backup"&gt;rdiff-backup&lt;/a&gt; seemed like a good choice. I also want to do snapshots at some point either with straight-up rsync or rsnapshot, but for now just the differential backups are probably fine. So I chose rdiff-backup.&lt;/p&gt;
&lt;p&gt;One easily-solved problem I encountered was that I have large data files that I don't have space to back up and that aren't super necessary to back up in the first place. However, I wanted to keep track of the files. So I'm using &lt;code&gt;rdiff-backup --exclude&lt;/code&gt; to exclude those directories, and then writing the output of &lt;code&gt;ls -lLR&lt;/code&gt; in those directories to a file to keep track of what's in them. Since the -l option tells us the modified times, I didn't think it was necessary to write the listing files out into my actual home directory and then have that be part of the backup. EDIT: On second thought, it actually is necessary to do so. If, for example, the entire directory we're saving the listing of was deleted, and then the backup script ran again, the listing would be overwritten with nothing and it would be pointless. So we need to do the listing before running the background and it needs to output to a directory that is going to be backed up.&lt;/p&gt;
&lt;p&gt;I combined these two steps into a python script that prints some information about what it's doing and then runs the commands. I always prefer python scripts to bash because you don't have to worry about escaping, or portability, or unreadability, or any of the other problems one encounters with shell scripting.&lt;/p&gt;
&lt;p&gt;The other half of the backup problem is actually running the backups. Putting a backup command in your crontab isn't the best idea for a desktop or laptop because it might be scheduled to run while your computer is off, resulting in a missed backup. &lt;a href="http://en.wikipedia.org/wiki/Anacron"&gt;Anacron&lt;/a&gt; is traditionally the solution to this: it runs cron jobs on a hourly/daily/monthly/whatever basis and, more importantly, will run jobs that were missed while the computer was off.&lt;/p&gt;
&lt;p&gt;However, I knew that systemd somewhat-recently gained support for doing cron-like things, and I knew that if I used systemd and wrote a unit file to run the backups, I could get the output easily and nicely into systemd's journal, making it easy to check that backups are running. If I put it in cron or anacron, which on my system are both covered by cronie, the output from my backup script would be mixed together with the other cronjobs' outputs. (I think.)&lt;/p&gt;
&lt;p&gt;So I wrote a simple .service unit file that runs the python script I wrote as a oneshot, and then wrote a .timer file which tells systemd to run the corresponding .service file with the same name daily (&lt;code&gt;OnCalendar=daily&lt;/code&gt;) and to run it ASAP if we missed the last time it was supposed to run (&lt;code&gt;Persistent=true&lt;/code&gt;). The service file also has some options to set the nice value to 19 (the lowest priority) and lower the IO priority. (&lt;code&gt;Nice=19&lt;/code&gt;, &lt;code&gt;IOSchedulingClass=2&lt;/code&gt;, &lt;code&gt;IOSchedulingPriority=7&lt;/code&gt;) These were mostly copied from &lt;a href="https://wiki.archlinux.org/index.php/Systemd/cron_functionality"&gt;this page on the arch linux wiki&lt;/a&gt;. Make sure to delete the in-line comments; they will cause errors if you try to actually use them as they are.&lt;/p&gt;
&lt;p&gt;I looked into using systemd user sessions to run these, but it seemed a bit complicated to set up and I wasn't entirely sure what the benefit was. Furthermore, I might use this script to do backups of /etc or something in the future, which would mean I wouldn't use a user session anyway. So instead I have the unit run as my own user (&lt;code&gt;User=username&lt;/code&gt;) and copied the .service and .timer files into &lt;code&gt;/etc/systemd/system/&lt;/code&gt;. I copied the python script that does the backups to &lt;code&gt;/usr/local/bin/backup-scripts/&lt;/code&gt;, though you could just leave it in &lt;code&gt;/usr/local/bin/&lt;/code&gt; just the same. The last step to make everything work is to enable the timer unit with something like &lt;code&gt;sudo systemctl enable my-backup.timer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It's probably irrational, but I feel a bit nervous making my script and unit files public even though the worst/best thing that would probably happen would be someone pointing out a way to make them better. Email me or something if you want to see them, I guess? that feels really lame.&lt;/p&gt;</content><category term="System Administration"></category><category term="backups"></category><category term="rdiff-backup"></category><category term="systemd"></category><category term="journalctl"></category><category term="cron"></category><category term="anacron"></category></entry><entry><title>This will make some people mad</title><link href="https://harrystern.net/this-will-make-some-people-mad.html" rel="alternate"></link><published>2014-09-12T00:00:00-04:00</published><updated>2014-09-12T00:00:00-04:00</updated><author><name>Harry Stern</name></author><id>tag:harrystern.net,2014-09-12:/this-will-make-some-people-mad.html</id><summary type="html">&lt;p&gt;In the shower today I came up with a pretty good metaphor for javascript vs. dart.&lt;/p&gt;
&lt;p&gt;You live in a desert. It is a no-fun, boring place. One day, someone from the Eich Construction Co. decides to make a playground. However, instead of a playground they end up making a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the shower today I came up with a pretty good metaphor for javascript vs. dart.&lt;/p&gt;
&lt;p&gt;You live in a desert. It is a no-fun, boring place. One day, someone from the Eich Construction Co. decides to make a playground. However, instead of a playground they end up making a minefield.&lt;/p&gt;
&lt;p&gt;Everyone rejoices and declares this to be the best thing ever. About 10-15 years later.&lt;/p&gt;
&lt;p&gt;People spend their time navigating the minefield, learning all the quirks and blowing themselves up regularly. Some people write books about how to navigate it (The Good Parts), others try to carpet or paint over the parts that are unsafe (CoffeeScript, TypeScript). People acquire Stockholm Syndrome regarding the playground/minefield and try to convince other people how fun it is.
"Oh, avoiding the mines is a great way to increase your acrobatic ability."
"You know, if you squint closely the minefield has some characteristics of a &lt;em&gt;functional&lt;/em&gt; playground."
"Look at this sandcastle I build directly on top of an active mine! I'm sure there won't be any problems if I try and make it bigger."&lt;/p&gt;
&lt;p&gt;Some people even take some of the mines and put them in their own &lt;strike&gt;servers&lt;/strike&gt; backyards and claim it is the best thing since sliced bread.&lt;/p&gt;
&lt;p&gt;Then this company GOOG Development Inc. comes along and some of them see these people being blown up, and decide to try something new. They build this nice big platform above the minefield, so you can't even step on it unless you really want to. It has actual attractions, like a water slide and a merry-go-round, because GOOG Dev. Inc. has lots of money to throw around. They develop a home version so you can put it in your &lt;strike&gt;server&lt;/strike&gt; backyard and it is faster and more efficient in benchmarks than the original mines. (okay I gave up on the metaphor here)&lt;/p&gt;
&lt;p&gt;It's really nice, but people have learned to love their minefield and continue to tell themselves that it's great. Why? WHY.&lt;/p&gt;
&lt;p&gt;Also I couldn't think of a good way to fit it in, but the guys who developed the v8 engine that node runs on and such? they are the guys who started dart and made the dart vm faster than v8.&lt;/p&gt;
&lt;p&gt;I hope this sparks lots of flame wars in the Hackathon Hackers group.&lt;/p&gt;</content><category term="Dart"></category><category term="Dart"></category><category term="Dartlang"></category><category term="Javascript"></category><category term="jimmies being rustled"></category></entry><entry><title>I went to an IGDA NJ meetup and it was cool</title><link href="https://harrystern.net/i-went-to-an-igda-nj-meetup-and-it-was-cool.html" rel="alternate"></link><published>2014-07-03T00:00:00-04:00</published><updated>2014-07-03T00:00:00-04:00</updated><author><name>Harry Stern</name></author><id>tag:harrystern.net,2014-07-03:/i-went-to-an-igda-nj-meetup-and-it-was-cool.html</id><summary type="html">&lt;p&gt;Yesterday, July 1st, I went to the IGDA NJ arcade demo meetup thing instead of studying for my differential equations final on the 2nd. didn't do too well, oops. However, there were cool people there and there were some surprisingly cool games. More importantly, I talked to a few people …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday, July 1st, I went to the IGDA NJ arcade demo meetup thing instead of studying for my differential equations final on the 2nd. didn't do too well, oops. However, there were cool people there and there were some surprisingly cool games. More importantly, I talked to a few people who were at the very least interested in coming to talk to COGS. Everyone there was indie so I didn't even mention the word "sponsorship" and I wouldn't ask anyone there for money for COGS, but meeting people is always helpful because you can't predict who knows who.&lt;/p&gt;
&lt;p&gt;It's a bit unfortunate they went to a bar afterwards because Richard and I (I went with him and he drove) were pretty hungry and it would have been cool to hang out with the people there some more. It seems like it's a monthly-ish thing, and I got into the NYC IGDA group recently as well and it seems like they do stuff too.&lt;/p&gt;
&lt;p&gt;We should advertise for speakers/sponsors in some of those groups as we get closer to the beginning of the semester and also confirmation from Rutgers that we will be an actual club. We could just post a simple google doc with "company name" "name" "contact info" "anything else" and like, my email address, but somehow that rubs me the wrong way. I guess I'd rather it be more personal, but at the same time I also want to advertise to the almost 900 people in the NYC IGDA facebook group.&lt;/p&gt;
&lt;p&gt;Also Richard had the good (obvious, but the best ideas are the obvious ones) to make a COGS spreadsheet for contacts. Richard had a lot of good ideas. He should really be on the e-board. He's also a pretty good programmer.&lt;/p&gt;
&lt;p&gt;Uh, I don't really have anything more I want to write right now but I feel like I should. Oh, he made the point that we should make the COGS demo game by just having a weekend game hackathon; get everyone into a room and make the game. Then probably do some cleanup so that we know how simple it can be. One or two people should do the architecture ahead of time so we just basically have to fill in the parts that we're going to fill in for the livecoding thing.&lt;/p&gt;
&lt;p&gt;And we should try out the livecoding idea to see if it actually works before doing it at the first meeting. yes.&lt;/p&gt;</content><category term="COGS"></category><category term="COGS"></category><category term="IGDA"></category><category term="game development"></category><category term="networking or whatever"></category></entry><entry><title>More thoughts on COGS</title><link href="https://harrystern.net/more-thoughts-on-cogs.html" rel="alternate"></link><published>2014-07-03T00:00:00-04:00</published><updated>2014-07-03T00:00:00-04:00</updated><author><name>Harry Stern</name></author><id>tag:harrystern.net,2014-07-03:/more-thoughts-on-cogs.html</id><summary type="html">&lt;p&gt;I put the last post on the COGS Facebook group and Andrew made some good points, and I talked to V and Billy and they made similar points (those two also gave me other ideas which I will talk about later in this post). Basically, making a game that's big …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I put the last post on the COGS Facebook group and Andrew made some good points, and I talked to V and Billy and they made similar points (those two also gave me other ideas which I will talk about later in this post). Basically, making a game that's big enough to be a group project is difficult to do during the semester for a variety of reasons, moreso if people don't have extrinsic motivation like getting a grade. So I don't think we're going to do a big club-wide game project.&lt;/p&gt;
&lt;p&gt;Suggestions that were made for other things to do: still make games, but on a smaller scale. Have mini-hackathons on the weekend where the goal is to make some small game that fits a theme. If the livecoding thing goes well (oh, by the way, I think we're doing to do a 2d tron game.) we can do more of those. I am a bit afraid that I will just end up awkwardly standing there. Hopefully I can get people to participate by seeding the audience with people who helped write the game in the first place.&lt;/p&gt;
&lt;p&gt;One thing that we definitely can't do is just gather people in a room and say "okay, now make games." That's not going to work. Anyone who could do that without needing any help probably already is and doesn't need someone to tell them. The people we want to get into the club are people who either don't know how to make games, and people whose CS abilities are good enough but they don't have artists to work with or realize that making games is fun or something. &lt;/p&gt;
&lt;p&gt;So we need to have events that focus on teaching people how to make games, and getting people who normally wouldn't consider trying to make games to try and make games. This includes getting artists and possibly musicians involved, and we need to follow up on leads in that direction as well. We have an entire art school; some of the people there must think that making video game art sounds cool.&lt;/p&gt;
&lt;p&gt;More importantly: food. We can't use the money Rutgers gives us (however that much ends up being. I would guess maybe $50? We can use it for Unreal Engine/Unity/whatever site licenses), but we can use money we get from outside sources for whatever we want, including getting pizza for talks/meetings. So, V and Billy suggested we use USACS' contact excel sheet and/or cold-email people who have some sort of stake in game development, e.g. Microsoft, and ask them to sponsor us/throw us money. They can send people to come give a talk or whatever. Oh look I just found &lt;a href="http://www.gamedevmap.com/index.php?query=New+York+City"&gt;this neat map&lt;/a&gt; that has a list of game development companies near NYC. If it's a game studio that actually makes games I don't really care if they give us money if they can send devs or someone down to talk to us, or if they let us come visit their offices or something. (and we could use Rutgers money for bus fare I think) Oh, interesting. I was looking at that list and apparently the &lt;a href="http://www.igda.org/"&gt;IGDA&lt;/a&gt;, the organization that originally ran the Global Game Jam, is in South Jersey. Oh hey, Rockstar's headquarters &lt;a href="http://www.rockstargames.com/careers/openings/rockstar-nyc"&gt;is in NYC&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I definitely think if we get devs from some of these companies to come give talks on whatever and if even a few of them give us money, COGS will be on its way to becoming a legitimate-seeming club.&lt;/p&gt;</content><category term="COGS"></category><category term="COGS"></category><category term="game development"></category></entry><entry><title>Thoughts on what COGS should be</title><link href="https://harrystern.net/thoughts-on-what-cogs-should-be.html" rel="alternate"></link><published>2014-07-03T00:00:00-04:00</published><updated>2014-07-03T00:00:00-04:00</updated><author><name>Harry Stern</name></author><id>tag:harrystern.net,2014-07-03:/thoughts-on-what-cogs-should-be.html</id><summary type="html">&lt;p&gt;&lt;a href="http://cogs.club/"&gt;COGS&lt;/a&gt; (domain is new so it might not work yet) is the game development club I co-founded with some people at Rutgers. It used to be an informal seminar run by Lars and some other people based on a former professor's notes from a seminar class. &lt;/p&gt;
&lt;p&gt;The problem I was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://cogs.club/"&gt;COGS&lt;/a&gt; (domain is new so it might not work yet) is the game development club I co-founded with some people at Rutgers. It used to be an informal seminar run by Lars and some other people based on a former professor's notes from a seminar class. &lt;/p&gt;
&lt;p&gt;The problem I was kind of having was that I'm not really sure what COGS should "do". As in, the anime club watches anime, dance troupes practice for performances, USACS organizes the various events for CS majors, but what should COGS do? The first thing that comes to mind is, of course, "make games," when you put it that way.&lt;/p&gt;
&lt;p&gt;For the first few meetings, I have talked with other people about doing a sort of live-coding thing with whoever shows up. Basically, we're going to write a simple game over summer break, either a simple platformer or something like pole position. Then we're going to delete all the important parts, like the systems that do movement. (it will be in git so the completed version will be in a separate branch or something). The livecoding sessions will then consist of me (or whoever wants to) standing with a laptop hooked up to a projector, and taking suggestions from the crowd on how to implement the game.&lt;/p&gt;
&lt;p&gt;I thought this was a good idea because we can then take suggestions from students who only sort of know Java from CS111 and 112; they don't necessarily need to know how to code their suggestions, as long as they can say something like "make a velocity vector and then add to the position each frame". &lt;/p&gt;
&lt;p&gt;Other ideas, i.e. for the rest of the semester, were basically that for the first part of the meeting someone would talk about a concept in game design or development, and then the rest of the meeting would be spent working individually or in groups on whatever people wanted. The problem with that model is that it doesn't really include artists in a meaningful way, or any other part of game development (e.g. design or story).&lt;/p&gt;
&lt;p&gt;A common suggestion at the one or two planning meetings we had before the semester ended was for everyone to work on a group project, and I'm starting to think that would be a good idea. In particular, when I realized the answer to "what does COGS do?" should be "make games," it seems fairly obvious. I have a moderately-ambitious game idea that I talked about with one or two other people, which I might write more about.&lt;/p&gt;</content><category term="COGS"></category><category term="COGS"></category><category term="game development"></category></entry><entry><title>Convolution</title><link href="https://harrystern.net/convolution.html" rel="alternate"></link><published>2014-06-09T00:00:00-04:00</published><updated>2014-06-09T00:00:00-04:00</updated><author><name>Harry Stern</name></author><id>tag:harrystern.net,2014-06-09:/convolution.html</id><summary type="html">&lt;p&gt;So I'm reading the chapter "Signals and Systems" in PDIS, and since I took Professor Goodman's &lt;a href="http://www.math.rutgers.edu/courses/357/index.html?arch=Spring_2014"&gt;DSP course&lt;/a&gt; a lot of the material is familiar to me, but presented in a different way or context. It's very neat to see things presented in a slightly unfamiliar way and then realize …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So I'm reading the chapter "Signals and Systems" in PDIS, and since I took Professor Goodman's &lt;a href="http://www.math.rutgers.edu/courses/357/index.html?arch=Spring_2014"&gt;DSP course&lt;/a&gt; a lot of the material is familiar to me, but presented in a different way or context. It's very neat to see things presented in a slightly unfamiliar way and then realize "oh, I know this." It's somehow validating your knowledge or something and is gratifying in a weird but nice way.&lt;/p&gt;
&lt;p&gt;In particular, this sentence really clicked for me in sort of mapping different intuitions to the same underlying idea:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Convolution is important because it tells us how to use a system's impulse response to find the output of the system to a given input.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(at this point I continued reading)&lt;/p&gt;
&lt;p&gt;The exposition in this book is really quite good. Following from the previous statement, we determined that &lt;span class="math"&gt;\(e^{\omega t}\)&lt;/span&gt; is an eigenfunction of LTI systems by taking the convolution with the system's impulse response &lt;span class="math"&gt;\(h(x)\)&lt;/span&gt;. (this sounds like a simple statement, or at least a succinct one, but it takes a bit of time to understand) Its eigenvalue is the &lt;a href="http://en.wikipedia.org/wiki/Frequency_response"&gt;frequency response&lt;/a&gt; &lt;span class="math"&gt;\(\int h(\tau)e^{-\omega\tau}d\tau\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;Then we have:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This fact reveals that one of the easiest types of functions to study with respect to LTI systems are the complex exponentials, since they pass through such systems unchanged except for complex scaling. If we can represent an input signal as a sum of these functions, then we can find the response of the system to each exponential individually, and then sum the responses together. The Fourier series and transform provide precisely the tools that decompose a signal into a sum of exponentials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This seems like a very different way to arrive at Fourier series and transform than "let's decompose a function as a sum of sine and cosines because that sounds like fun". Basically, it gives us a reason why we might want to do such a thing a priori.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Signal Processing"></category><category term="Principles of Digital Image Synthesis"></category><category term="convolution"></category></entry><entry><title>Principles of Digital Image Synthesis</title><link href="https://harrystern.net/principles-of-digital-image-synthesis.html" rel="alternate"></link><published>2014-06-04T00:00:00-04:00</published><updated>2014-06-04T00:00:00-04:00</updated><author><name>Harry Stern</name></author><id>tag:harrystern.net,2014-06-04:/principles-of-digital-image-synthesis.html</id><summary type="html">&lt;p&gt;So one of the things I'm doing this summer is reading &lt;a href="http://dl.acm.org/citation.cfm?id=527570"&gt;Principles of Digital Image Synthesis&lt;/a&gt; by &lt;a href="http://glassner.com/"&gt;Andrew Glassner&lt;/a&gt;. It's from 1995 which makes it almost 20 years old, but the fundamental mathematics don't change and it's quite comprehensive. I found it released freely &lt;a href="http://www.realtimerendering.com/blog/principles-of-digital-image-synthesis-now-free-for-download/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It starts with "The Human …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So one of the things I'm doing this summer is reading &lt;a href="http://dl.acm.org/citation.cfm?id=527570"&gt;Principles of Digital Image Synthesis&lt;/a&gt; by &lt;a href="http://glassner.com/"&gt;Andrew Glassner&lt;/a&gt;. It's from 1995 which makes it almost 20 years old, but the fundamental mathematics don't change and it's quite comprehensive. I found it released freely &lt;a href="http://www.realtimerendering.com/blog/principles-of-digital-image-synthesis-now-free-for-download/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It starts with "The Human Visual System and Color" for the first 100ish pages, covering "The Human Visual System", "Color Spaces", and "Displays". While I thought the chapter on how the eye works was interesting, I didn't really pay close attention to it, so that I feel like while I have a better understanding of how eyesight works than before, I don't think I could really explain it to someone else.&lt;/p&gt;
&lt;p&gt;Color spaces was too abstract for something that I thought should have been more visceral considering that it's color, but I think the main point of the chapter is that saying "it's just color, how difficult can it be?" is a very big mistake. There are problems with how a human perceives color, the unintuitiveness of the &lt;a href="http://en.wikipedia.org/wiki/CIE_XYZ"&gt;CIE XYZ color space&lt;/a&gt;, and more importantly the gamut that your monitor or printer is able to render. The chapter on color spaces also talks about the problem of perceptual uniformity; that is, in the XYZ color space, changes of equal distance are not equally perceptible.&lt;/p&gt;
&lt;p&gt;&lt;img alt="MacAdam ellipse" src="https://upload.wikimedia.org/wikipedia/commons/f/f4/CIExy1931_MacAdam.png"&gt;&lt;/p&gt;
&lt;p&gt;The ellipses shown were reported to be of constant color in an &lt;a href="http://en.wikipedia.org/wiki/MacAdam_ellipse"&gt;experiment&lt;/a&gt;, and they may or may not on your computer because the ellipses are enlarged and your computer may display the colors differently, so that there is a perceivable difference.&lt;/p&gt;
&lt;p&gt;This is the part where I sort of stopped trying to understand 100% of what was going on. To fix this problem of perceptual (non-)uniformity, the CIE defined other spaces, L*a*b and L*u*v, which are transformations of the XYZ color space. I understand that the point is to make the spaces perceptually linear, but I don't really see what the formulas are doing or have any intuition for them other than the description that you can imagine a cylinder with the vertical axis being lightness and the angle and distance from the center being hue and saturation or whatever. Maybe if the pictures in the pdf were in color they would make sense. We actually have a copy of the book in the libraries at Rutgers; I should really just check the first volume out or something.&lt;/p&gt;
&lt;p&gt;The chapter on Displays was interesting but mostly about CRTs, which, obviously, aren't used very much after 20 years, so I don't really have much to say about it. There was material about the RGB color space and gamut mapping but I feel like I don't need to understand that 100% right now so I will continue on.&lt;/p&gt;
&lt;p&gt;I wrote surprisingly more than I thought I would for what amounts to a summary of a cursory reading of the (if I may) more boring parts of a textbook.&lt;/p&gt;</content><category term="Computer Graphics"></category><category term="Principles of Digital Image Synthesis"></category><category term="color systems"></category></entry><entry><title>First Post</title><link href="https://harrystern.net/first-post.html" rel="alternate"></link><published>2014-06-03T00:00:00-04:00</published><updated>2014-06-03T00:00:00-04:00</updated><author><name>Harry Stern</name></author><id>tag:harrystern.net,2014-06-03:/first-post.html</id><summary type="html">&lt;p&gt;I've had several blogs over the years but I never really managed to consistently update one. The reason why I started this one is sort of stupid. I want to keep my streak on github, but I also want to spend time reading/learning computer graphics. However, I know that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've had several blogs over the years but I never really managed to consistently update one. The reason why I started this one is sort of stupid. I want to keep my streak on github, but I also want to spend time reading/learning computer graphics. However, I know that some days if I spend them reading I won't write any code, so the purpose of this blog is to make me actually learn something when I don't write code by forcing me to write about what I learned in order to keep the streak.&lt;/p&gt;
&lt;p&gt;I'm not sure if this is a good idea. Regardless, it was also a chance to set up my github.io page. I'm using pelican because it was easier to install on arch than jekyll since I already had pip installed and didn't feel like figuring out rubygems. &lt;/p&gt;
&lt;p&gt;Oh I forgot about the name. The css is fucked right now and I might just change the theme completely, but it is "Pro-cantabrigian hypsidolichocephalism", which are just two random words I picked from /usr/share/dict/words. It doesn't mean anything. Well, technically the words have a meaning but it's not important.&lt;/p&gt;</content><category term="misc"></category></entry></feed>